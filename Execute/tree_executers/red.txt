#include "../execute.h"
#include <fcntl.h>
#include <unistd.h>

static int red_in(t_tree *red_node)
{
    int fd = open(red_node->str, O_RDONLY);
    if (fd == -1)
        return (perror("minishell: input"), EXIT_FAILURE);
    if (dup2(fd, STDIN_FILENO) == -1)
        return (perror("minishell: dup2"), close(fd), EXIT_FAILURE);
    close(fd);
    return (EXIT_SUCCESS);
}

static int red_out(t_tree *red_node)
{
    int fd = open(red_node->str, O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd == -1)
        return (perror("minishell: output"), EXIT_FAILURE);
    if (dup2(fd, STDOUT_FILENO) == -1)
        return (perror("minishell: dup2"), close(fd), EXIT_FAILURE);
    close(fd);
    return (EXIT_SUCCESS);
}

static int red_append(t_tree *red_node)
{
    int fd = open(red_node->str, O_WRONLY | O_CREAT | O_APPEND, 0644);
    if (fd == -1)
        return (perror("minishell: append"), EXIT_FAILURE);
    if (dup2(fd, STDOUT_FILENO) == -1)
        return (perror("minishell: dup2"), close(fd), EXIT_FAILURE);
    close(fd);
    return (EXIT_SUCCESS);
}

int handle_red(t_tree *cmd_node, t_data *data)
{
    t_tree *red = cmd_node->red;
    while (red)
    {
        if (red->tok == INPUT_FILE_ID)
        {
            if (red_in(red) != EXIT_SUCCESS)
                return (EXIT_FAILURE);
        }
        else if (red->tok == OUTPUT_FILE_ID)
        {
            if (red_out(red) != EXIT_SUCCESS)
                return (EXIT_FAILURE);
        }
        else if (red->tok == INPUT_APP_FILE_ID)
        {
            if (red_append(red) != EXIT_SUCCESS)
                return (EXIT_FAILURE);
        }
        red = red->red; // move to next redirection
    }
    return (EXIT_SUCCESS);
}
